{
  "compilerOptions": {

    "target": "ES2021"

    //,"sourceMap": true

    //,"outDir": "./_build"    
    
    //,"watch": true

    //,"module": "amd"  //Val. par défaut : "ES2015"("es6") si target supérieur à "ES5", sinon "CommonJS". 
                        //Par contre, INDISPENSABLE pour q'un modules Loader puisse exploiter
                        //le code compilé.
                        //Seules les valeurs "amd" ou "umd" seront fonctionnelles pour requirejs. 
                        // Pour SystemJS : ne fonctionnera PAS avec la valeur "es6".
                        //                 mais Ok avec "amd", "system", "umd", commonJS".

    
    //,"moduleResolution": "Node" //Val. par défaut: "Classic" si l'option module vaut "ES2015" | "AMD" | "System".
                                  //Sinon vaut     : "Node" 
    ,"moduleResolution": "Node" //<<< NÉCESSAIRE en effet, si target haut dessus de "es5", comme ici.

    //,"traceResolution": true //Permet d'avoir (en console), le détail des tentatives de résolution de path 
                             //lorsque le compilo. cherche à trouver dans l'arborescence les 
                             //modules qu'on lui demande d'importer.
                             //Rem.: les ambient modules n'apparaîtront pas dans la recherche.

                     

    //,"allowJs": true  //INDISPENSABLE pour que les .js sources puissent être mis au format 
                        //target, dans le répertoire outDir.

                      
    //,"experimentalDecorators": true

  
    //, "declaration": true //Génère au même niveau que chaque .js généré, un fichier .d.ts correspondant au dit .js .

    
    
    //-----------------------------------------------------------------------------------------------------
    //baseUrl: chemin relatif au présent dossier, et où le compilo. ira chercher les modules à importer 
    //pour lesquels on n'a pas préciseé de chemin Relatif lors de la syntaxe d'import.
    // ATTENTION ! Si précisé donc, la tentative de Résolution du chemin de ces fichiers à importer 
    //sans chemin relatif, COMMENCERA par une recherche avec le chemin relatif: baseUrl !!
    //Sauf peut-être si paths (voir ci-dessous) est précisé.
    ,"baseUrl": "./"

    //paths, NÉCESSITE que baseUrl ci-dessus soit définie, et permet de spécifier plusieurs chemins de recherche plus pécis, 
    //et TOUS relatifs à baseUrl !! Attention ne concerne QUE la recherche pour les modules à importer 
    //pour lesquels on n'a pas précisé de chemin Relatif lors de la syntaxe d'import.
    //ATTENTION : dés lors que paths est précisé, la recherche baseUrl combinée avec paths est PRIORITAIRE
    // sur celle avec baseUrl toute seule !
    //3 cas de figures plus précisément: 
    //  1- aucune clef de l'objet paths ne match avec le nom de l'import à chercher, 
    //    alors la recherche essaiera avec baseUrl toute seule.
    //  2- au moins 1 clef de l'objet paths match avec le nom de l'import à chercher,
    //     alors :
    //            2a- si un élément du tableau associé match, eh bien ok le module est trouvé. Fin de la recherche.
    //            2b- aucun élément du tableau associé ne match, alors la recherche avec paths est abandonnée
    //                ET la recherche avec baseUrl toute seule est AUSSI abandonnée !! <<<<<<
    ,"paths": { //<<Sous WEBPACK "paths" est pris en compte grâce au plugin installé en plus : tsconfig-paths-webpack-plugin
      /*  
      //Clef "*" => signifie recherche à faire pour tout module à import non-relatif
      //            Cette "*" représente tout simplement le nom du module à chercher <<<<
      "*" :[ //Ici les "**" sont interdits, contrairement à la directive "include"
        //"*",   //le nom du module à chercher tel quel, dans baseUrl donc.
        "GG/*" //le nom du module à chercher précédé par le chemin baseUrl/GG/
      ],

      //Clef "myFunctions"
      "myFunctions" :[   //Lorsqu'il n'y a pas d "*" dans la clef, comme ici,
                         //alors utiliser "*" ci-dessous est sans effet.
        //chemin relatif à baseUrl je rappelle.                          
        //"../../node_modules/tst_Lib/*" //<<< sans effet !!
        "../../node_modules/tst_Lib/myFunctions" //<<< OK
      ],

      //Clef "nimp*"
      "nimp*" : ["../../node_modules/tstt/nimporte"],  //chemin relatif à baseUrl je rappelle.
      
      //Clef "@*"
      "@*": ["../../node_modules/*"] //<<<Sinon "@..." n'est pas considéré par le compilo., comme ayant un lien avec un dossier node_modules !
      */

      "@MaLib*": ["_src/libTest*"]
    }

    //REMARQUE : si l'emplacement de modules a réussi à être résolu via 'baseUrl' ou 'baseUrl couplé à paths',
    //           alors si ces modules sont des .ts, ils SERONT AUTOMATIQUEMENT COPIÉS (.js) dans le outDir,
    //           en y conservant qui plus est, leur arborescence.
    //-----------------------------------------------------------------------------------------------------
    
  }

  //"include" permet de forcer la génération de .js, à partir de .ts sources, dont on précisera le chemin.
  //ATENTION: par défaut les éventuels .ts situés dans node_modules/., ne seront pas considérés,
  // SAUF si on les mentionne explicitement ci-dessous donc.
  //,"include": [
  //    "./**/*" //Permet de spécifier qu'il faut générer un .js, pour tous les .ts depuis le présent dossier, SAUF ceux situés dans node_modules/.
  //    , "./node_modules/@types/**/*" //Cherchera à compiler et mettre dans outDir, tout fichier ts (*), de toute l'arbo.(**) "./node_modules/@types/"
  //]
  //REMARQUE: comme vu plus haut,
  //          baseUrl.... permet aussi, sous certaines conditions, de faire passer des .ts 
  //          de node_modules (par exemple), en .js dans le outDir.


}